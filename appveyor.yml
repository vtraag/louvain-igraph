branches:
  only:
  - master
  - develop

environment:
  global:
    CIBW_TEST_REQUIRES: ddt
    CIBW_TEST_COMMAND: "cd {project} && python -m unittest discover tests"
    TWINE_USERNAME: __token__

  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      APPVEYOR_JOB_NAME: "python38-sdist-ubuntu"
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      APPVEYOR_JOB_NAME: "python38-x64-ubuntu"
      CIBW_BUILD: "cp3?-*"
      CIBW_BEFORE_BUILD: "yum install -y flex bison libxml2-devel zlib-devel && python setup.py build_c_core > /dev/null 2>&1"
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
      APPVEYOR_JOB_NAME: "python38-x64-macos-mojave"
      CIBW_BUILD: "cp3?-*"
      CIBW_BEFORE_BUILD: "python setup.py build_c_core"
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      APPVEYOR_JOB_NAME: "python38-x86-vs2017"
      CIBW_BUILD: "cp3?*-win32"
      MSYSTEM: MINGW32
      PATH: C:\Python38;C:\Python38\Scripts;C:\msys64\usr\bin;C:\msys64\mingw32\bin;C:\Windows\System32;C:\Windows;%PATH%
      TARGET_ARCH: "x86"
      PYTHON: C:\Python38
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      APPVEYOR_JOB_NAME: "python38-x64-vs2017"
      CIBW_BUILD: "cp3?*-win_amd64"
      MSYSTEM: MINGW64
      CIBW_BEFORE_BUILD: "python setup.py build_c_core"
      IGRAPH_EXTRA_CONFIGURE_ARGS: "--disable-graphml"
      PATH: C:\Python38-x64;C:\Python38-x64\Scripts;C:\msys64\usr\bin;C:\msys64\mingw64\bin;C:\Windows\System32;C:\Windows;%PATH%
      TARGET_ARCH: "x64"
      PYTHON: C:\Python38-x64

platform:
  - x64

stack: python 3.8

before_build:
  - git submodule update --init --recursive

install:
  - bash -lc "pacman --needed --noconfirm -Sy pacman-mirrors"
  - bash -lc "pacman --noconfirm -Sy"
  - bash -lc "pacman --noconfirm -S autoconf automake bison flex libtool mingw-w64-x86_64-libtool mingw-w64-i686-libxml2 mingw-w64-x86_64-libxml2 zip"
  - bash -lc "pacman --noconfirm -Rs git" # Must be removed in order to use Windows git
  - python.exe -m pip install cibuildwheel==1.3.0

on_success:
  - >
    IF "%APPVEYOR_REPO_TAG%" == "true"
    (
    python -m pip install twine
    &&
    python -m twine upload --repository-url https://upload.pypi.org/legacy/ wheelhouse/*.whl
    )

for:
  - matrix:
      only:
        - MSYSTEM: MINGW32
    build_script:
      - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat"
      - "python -m cibuildwheel --output-dir wheelhouse"
  - matrix:
      only:
        - MSYSTEM: MINGW64
    build_script:
      - call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
      - "python -m cibuildwheel --output-dir wheelhouse"
  - matrix:
      except:
        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
        - APPVEYOR_JOB_NAME: "python38-sdist-ubuntu"
    install:
      - python -m pip install cibuildwheel==1.3.0
    build_script:
      # build the wheels, put them into './wheelhouse'
      - python -m cibuildwheel --output-dir wheelhouse
    on_success:
      - >
        if [ "$APPVEYOR_REPO_TAG" == "true" ]; then
          python -m pip install twine && python -m twine upload --repository-url https://upload.pypi.org/legacy/ wheelhouse/*.whl
        fi
  - matrix:
      only:
        - APPVEYOR_JOB_NAME: "python38-sdist-ubuntu"
    install:
      - python -m pip install cibuildwheel==1.3.0
    build_script:
      # build the source distribution
      - python setup.py sdist
    on_success:
      - >
        if [ "$APPVEYOR_REPO_TAG" == "true" ]; then
          python -m pip install twine && python -m twine upload --repository-url https://upload.pypi.org/legacy/ dist/*.tar.gz
        fi

artifacts:
  - path: "wheelhouse/*.whl"
    name: wheels
  - path: "dist/*.tar.gz"
    name: source